#!/usr/bin/env sh
# Pre-commit hook for shmup-yours
# Package manager enforcement + ESLint enforcement with educational error messages

. "$(dirname -- "$0")/_/husky.sh"

# Performance tracking
start_time=$(date +%s)

echo "🔍 Running pre-commit quality checks..."

# Check for package manager consistency
if [ -f "package-lock.json" ]; then
    echo ""
    echo "❌ Package Manager Violation: npm lockfile detected"
    echo "This project uses yarn workspaces. Please run:"
    echo "  rm package-lock.json && yarn install"
    echo ""
    echo "🆘 Emergency override: git commit --no-verify"
    exit 1
fi

# Run lint-staged for performance (only staged files)
echo "📝 Checking code style (ESLint)..."
yarn lint:staged

# Check exit code and provide educational feedback
lint_exit_code=$?
if [ $lint_exit_code -ne 0 ]; then
    echo ""
    echo "❌ ESLint violations detected"
    echo ""
    echo "💡 Quick fixes to try:"
    echo "   yarn lint:fix           # Auto-fix many issues"
    echo "   yarn workspace frontend lint:fix"
    echo "   yarn workspace backend lint:fix"
    echo ""
    echo "🆘 Emergency override (use sparingly):"
    echo "   git commit --no-verify  # Bypasses all hooks"
    echo ""
    echo "📖 Full documentation: docs/ESLINT_SETUP.md"
    exit 1
fi

# Performance check
end_time=$(date +%s)
duration=$((end_time - start_time))

if [ $duration -gt 30 ]; then
    echo ""
    echo "⚠️  Performance Warning: Hook took ${duration}s (target: <30s)"
    echo ""
    echo "💡 Performance tips:"
    echo "   - ESLint cache is enabled"
    echo "   - Only staged files are checked" 
    echo "   - Consider .eslintignore for large files"
    echo ""
fi

echo "✅ All pre-commit checks passed! (${duration}s)"
echo ""