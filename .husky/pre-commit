#!/bin/bash

# Package Manager Enforcement Pre-commit Hook
# Enforces yarn usage and prevents npm package-lock.json conflicts

set -e

echo "üîç Checking package manager enforcement..."

# Colors for output (disable if not in a terminal)
if [ -t 1 ]; then
    RED='\033[0;31m'
    YELLOW='\033[1;33m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
else
    RED=''
    YELLOW=''
    GREEN=''
    BLUE=''
    NC=''
fi

# Function to print educational error messages
print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Track if any errors were found
HAS_ERRORS=false

# 1. Check for package-lock.json files
echo
print_info "üîç Checking for package-lock.json files..."
if find . -name "package-lock.json" -not -path "./node_modules/*" | grep -q "package-lock.json"; then
    print_error "package-lock.json files detected in the repository!"
    echo
    print_info "This project uses Yarn as the package manager. package-lock.json files"
    print_info "are created by npm and can cause dependency conflicts."
    echo
    print_info "To fix this issue:"
    echo "  1. Remove the package-lock.json file(s):"
    find . -name "package-lock.json" -not -path "./node_modules/*" | while read -r file; do
        echo "     rm \"$file\""
    done
    echo "  2. Use 'yarn install' instead of 'npm install'"
    echo "  3. Use 'yarn add <package>' instead of 'npm install <package>'"
    echo
    HAS_ERRORS=true
else
    print_success "No package-lock.json files found"
fi

# 2. Check for npm commands in package.json scripts
echo
print_info "üîç Checking for npm commands in package.json scripts..."
NPM_SCRIPTS_FOUND=false

for package_file in $(find . -name "package.json" -not -path "./node_modules/*"); do
    if grep -q '"scripts"' "$package_file"; then
        # Extract scripts section and check for npm commands
        if grep -A 50 '"scripts"' "$package_file" | grep -E '"[^"]*":\s*"[^"]*npm[^"]*"' | grep -q -v yarn; then
            print_warning "Found npm commands in $package_file scripts"
            echo
            print_info "Consider replacing npm commands with yarn equivalents:"
            echo "  npm install        ‚Üí yarn install"
            echo "  npm install <pkg>  ‚Üí yarn add <pkg>"
            echo "  npm run <script>   ‚Üí yarn <script>"
            echo "  npm test           ‚Üí yarn test"
            echo "  npm start          ‚Üí yarn start"
            echo "  npm run build      ‚Üí yarn build"
            echo
            NPM_SCRIPTS_FOUND=true
        fi
    fi
done

if [ "$NPM_SCRIPTS_FOUND" = false ]; then
    print_success "No npm commands found in package.json scripts"
fi

# 3. Check that yarn.lock exists when package.json has dependencies
echo
print_info "üîç Checking yarn.lock consistency..."
PACKAGE_JSON_WITH_DEPS=false

# Check if any package.json files have dependencies
for package_file in $(find . -name "package.json" -not -path "./node_modules/*"); do
    if grep -q '"dependencies"\|"devDependencies"' "$package_file"; then
        PACKAGE_JSON_WITH_DEPS=true
        break
    fi
done

if [ "$PACKAGE_JSON_WITH_DEPS" = true ]; then
    if [ ! -f "./yarn.lock" ]; then
        print_error "yarn.lock file is missing but package.json files have dependencies!"
        echo
        print_info "To fix this issue:"
        echo "  1. Run 'yarn install' to generate yarn.lock"
        echo "  2. Commit the yarn.lock file to ensure consistent dependency resolution"
        echo
        HAS_ERRORS=true
    else
        print_success "yarn.lock file exists"
    fi
else
    print_info "No dependencies found in package.json files"
fi

# 4. Performance check - ensure hook runs quickly
HOOK_END_TIME=$(date +%s%N)
HOOK_START_TIME=${HOOK_START_TIME:-$HOOK_END_TIME}
HOOK_DURATION=$((($HOOK_END_TIME - $HOOK_START_TIME) / 1000000)) # Convert to milliseconds

# Only show timing if it took more than 100ms or if explicitly requested
if [ $HOOK_DURATION -gt 100 ] || [ "${SHOW_TIMING}" = "true" ]; then
    print_info "Hook execution time: ${HOOK_DURATION}ms"
fi

# Final result
if [ "$HAS_ERRORS" = true ]; then
    echo
    print_error "Pre-commit hook failed! Please fix the issues above before committing."
    echo
    print_info "This hook enforces yarn usage to prevent package manager conflicts."
    print_info "For more information, see the project's CONTRIBUTING.md file."
    exit 1
else
    echo
    print_success "Package manager enforcement checks passed!"
fi
